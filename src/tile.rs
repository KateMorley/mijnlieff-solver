//! Defines an enum representing a tile.

use crate::board::Board;

/// Represents a tile.
#[derive(Copy, Clone)]
pub enum Tile {
    Puller,
    Pusher,
    Straight,
    Diagonal,
}

impl Tile {
    /// The bit fields representing the squares unavailable after a move,
    /// indexed by tile discriminant and the square in which the tile was
    /// played.
    const MOVES: [[u16; 16]; 4] = [
        [
            0b_1111_1111_1100_1101,
            0b_1111_1111_1000_1010,
            0b_1111_1111_0001_0101,
            0b_1111_1111_0011_1011,
            0b_1111_1100_1101_1100,
            0b_1111_1000_1010_1000,
            0b_1111_0001_0101_0001,
            0b_1111_0011_1011_0011,
            0b_1100_1101_1100_1111,
            0b_1000_1010_1000_1111,
            0b_0001_0101_0001_1111,
            0b_0011_1011_0011_1111,
            0b_1101_1100_1111_1111,
            0b_1010_1000_1111_1111,
            0b_0101_0001_1111_1111,
            0b_1011_0011_1111_1111,
        ],
        [
            0b_0000_0000_0011_0011,
            0b_0000_0000_0111_0111,
            0b_0000_0000_1110_1110,
            0b_0000_0000_1100_1100,
            0b_0000_0011_0011_0011,
            0b_0000_0111_0111_0111,
            0b_0000_1110_1110_1110,
            0b_0000_1100_1100_1100,
            0b_0011_0011_0011_0000,
            0b_0111_0111_0111_0000,
            0b_1110_1110_1110_0000,
            0b_1100_1100_1100_0000,
            0b_0011_0011_0000_0000,
            0b_0111_0111_0000_0000,
            0b_1110_1110_0000_0000,
            0b_1100_1100_0000_0000,
        ],
        [
            0b_1110_1110_1110_0001,
            0b_1101_1101_1101_0010,
            0b_1011_1011_1011_0100,
            0b_0111_0111_0111_1000,
            0b_1110_1110_0001_1110,
            0b_1101_1101_0010_1101,
            0b_1011_1011_0100_1011,
            0b_0111_0111_1000_0111,
            0b_1110_0001_1110_1110,
            0b_1101_0010_1101_1101,
            0b_1011_0100_1011_1011,
            0b_0111_1000_0111_0111,
            0b_0001_1110_1110_1110,
            0b_0010_1101_1101_1101,
            0b_0100_1011_1011_1011,
            0b_1000_0111_0111_0111,
        ],
        [
            0b_0111_1011_1101_1111,
            0b_1111_0111_1010_1111,
            0b_1111_1110_0101_1111,
            0b_1110_1101_1011_1111,
            0b_1011_1101_1111_1101,
            0b_0111_1010_1111_1010,
            0b_1110_0101_1111_0101,
            0b_1101_1011_1111_1011,
            0b_1101_1111_1101_1011,
            0b_1010_1111_1010_0111,
            0b_0101_1111_0101_1110,
            0b_1011_1111_1011_1101,
            0b_1111_1101_1011_0111,
            0b_1111_1010_0111_1111,
            0b_1111_0101_1110_1111,
            0b_1111_1011_1101_1110,
        ],
    ];

    /// Returns the board of squares unavailable after playing the tile in the
    /// specified square.
    pub fn get_unavailable(&self, square: u8) -> Board {
        Board::from(Tile::MOVES[*self as usize][square as usize])
    }
}

#[cfg(test)]
mod tests {
    use super::Tile::*;

    #[test]
    fn get_unavailable() {
        assert_eq!(0b_1111_1111_1100_1101, u16::from(Puller.get_unavailable(0)));
    }
}
